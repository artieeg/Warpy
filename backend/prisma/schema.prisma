datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl"]
  previewFeatures = ["referentialActions"]
}

model User {
  id          String        @id @default(cuid())
  username    String
  first_name  String
  last_name   String
  avatar      String
  email       String
  sub         String
  created_at  DateTime      @default(now())
  participant Participant[]

  sent_reports     Report[] @relation(name: "sent_reports")
  received_reports Report[] @relation(name: "received_reports")

  //Blocked in streams
  streamBlocked StreamBlock[] @relation(name: "stream_blocks")

  //Blocked by
  blocked UserBlock[] @relation(name: "blocked")

  //Blocked others
  blocker UserBlock[] @relation(name: "blocker")

  followers FollowRecord[] @relation(name: "follower")
  followed  FollowRecord[] @relation(name: "followed")

  inviter Invite[] @relation(name: "inviter")
  invitee Invite[] @relation(name: "invitee")

  //Stream Stream[]
  @@map(name: "Users")
}

model UserBlock {
  id String @id @default(cuid())

  blocked_id String
  blocked    User   @relation(name: "blocked", fields: [blocked_id], references: [id], onDelete: Cascade)

  blocker_id String
  blocker    User   @relation(name: "blocker", fields: [blocker_id], references: [id], onDelete: Cascade)
}

model Report {
  id          String @id @default(cuid())
  reporter_id String
  reporter    User   @relation(name: "sent_reports", fields: [reporter_id], references: [id], onDelete: Cascade)

  reported_id String
  reported    User   @relation(name: "received_reports", fields: [reported_id], references: [id], onDelete: Cascade)

  reason String

  created_at DateTime @default(now())
}

model Participant {
  id            String    @id @default(cuid())
  user_id       String    @unique
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  stream_id     String?
  stream        Stream?   @relation(name: "participant", fields: [stream_id], references: [id], onDelete: Cascade)
  role          String
  isRaisingHand Boolean
  isBanned      Boolean   @default(false)
  hasLeftStream Boolean   @default(false)
  joined_at     DateTime  @default(now())
  left_at       DateTime?

  recvNodeId String
  sendNodeId String?

  Stream Stream[] @relation("owner")

  @@unique([user_id, stream_id, hasLeftStream], name: "stream_participant_index")
}

model StreamBlock {
  id String @id @default(cuid())

  stream_id String
  stream    Stream @relation(name: "blocks", fields: [stream_id], references: [id], onDelete: Cascade)

  user_id String @unique
  user    User   @relation(name: "stream_blocks", fields: [user_id], references: [id], onDelete: Cascade)
}

model Stream {
  id           String        @id @default(cuid())
  title        String
  owner_id     String
  owner        Participant          @relation(name: "owner", fields: [owner_id], references: [user_id], onDelete: Cascade)
  hub          String
  live         Boolean
  preview      String?
  participants Participant[] @relation(name: "participant")
  blocks       StreamBlock[] @relation(name: "blocks")
  invites      Invite[]      @relation(name: "invites")
  reactions    Int
}

model RefreshToken {
  id    String @id @default(cuid())
  token String
}

model FollowRecord {
  id          String @id @default(cuid())
  follower_id String
  followed_id String

  follower User @relation(name: "follower", fields: [follower_id], references: [id], onDelete: Cascade)
  followed User @relation(name: "followed", fields: [followed_id], references: [id], onDelete: Cascade)

  @@unique([follower_id, followed_id], name: "unique_follow_index")
}

model Invite {
  id String @id @default(cuid())

  stream_id String
  stream    Stream @relation(name: "invites", fields: [stream_id], references: [id], onDelete: Cascade)

  invitee_id String
  invitee    User   @relation(name: "invitee", fields: [invitee_id], references: [id], onDelete: Cascade)

  inviter_id   String
  inviter      User           @relation(name: "inviter", fields: [inviter_id], references: [id], onDelete: Cascade)
  notification Notification?

  @@unique([id, inviter_id], name: "inviter_index")
}

model Notification {
  id String @id @default(cuid())

  invite_id String? @unique
  invite    Invite? @relation(fields: [invite_id], references: [id], onDelete: Cascade)
}
